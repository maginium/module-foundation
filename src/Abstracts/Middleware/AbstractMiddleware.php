<?php

declare(strict_types=1);

namespace Maginium\Foundation\Abstracts\Middleware;

use Closure;
use Magento\Framework\App\ResponseInterface as BaseResponseInterface;
use Magento\Webapi\Controller\Rest;
use Maginium\Framework\Request\Interfaces\RequestInterface;
use Maginium\Framework\Request\Request;
use Maginium\Framework\Response\Interfaces\ResponseInterface;
use RuntimeException;

/**
 * Abstract middleware class that provides a template for handling HTTP requests and responses.
 * The class defines lifecycle methods (before, around, and after dispatch) for custom request processing.
 */
abstract class AbstractMiddleware
{
    /**
     * Handles pre-dispatch logic before the main dispatch occurs.
     * This is called before the controller's action is executed.
     *
     * @param Rest $subject The Rest controller instance that is being intercepted.
     * @param RequestInterface $request The incoming HTTP request object.
     */
    public function beforeDispatch(Rest $subject, RequestInterface $request): void
    {
        // Check if the incoming request is of type Request, which is specific to REST requests.
        if ($request instanceof Request) {
            // Call the optional before method to allow subclasses to implement custom logic.
            $this->before($request);
        }
    }

    /**
     * Middleware method that processes the incoming request and applies custom logic before
     * and after passing control to the next middleware or controller action.
     * This method acts as an "around" interceptor for the dispatch process.
     *
     * @param Rest $subject The intercepted Rest controller instance.
     * @param Closure $next The next middleware or controller function to call.
     * @param RequestInterface $request The incoming HTTP request object.
     *
     * @throws RuntimeException If the closure does not return a valid ResponseInterface.
     *
     * @return BaseResponseInterface The response generated after processing the request.
     */
    public function aroundDispatch(
        Rest $subject,
        Closure $next,
        RequestInterface $request,
    ): BaseResponseInterface {
        // Check if the incoming request is of type Request, which is specific to REST requests.
        if ($request instanceof Request) {
            // Call the next middleware or controller action, and capture the response.
            $response = $this->handle($subject, $next, $request);

            // Return the finalized response.
            return $response;
        }

        // Return the finalized response.
        return $next($request);
    }

    /**
     * Handles post-dispatch logic after the main dispatch occurs.
     * This is called after the controller's action has been executed and a response has been generated.
     *
     * @param Rest $subject The Rest controller instance that has handled the request.
     * @param ResponseInterface $response The response generated by the controller.
     */
    public function afterDispatch(Rest $subject, $response): BaseResponseInterface
    {
        // Call the optional after method to allow subclasses to implement custom logic.
        $this->after($response);

        // Return the original response
        return $response;
    }

    /**
     * Optional pre-dispatch logic that can be implemented by subclasses.
     * This method is called before the controller action is executed.
     *
     * @param RequestInterface $request The incoming HTTP request object.
     */
    protected function before($request): void
    {
        // This method is intentionally left empty to be optionally overridden in subclasses.
        // Subclasses can implement any custom logic before the request is dispatched.
    }

    /**
     * Abstract method that must be implemented by subclasses to process the incoming request.
     * This method is where the custom logic to handle the request and generate a response is implemented.
     *
     * @param RequestInterface $request The incoming HTTP request object.
     * @param Closure $next The next middleware or controller function.
     *
     * @return ResponseInterface The response generated after handling the request.
     */
    protected function handle(
        Rest $subject,
        Closure $next,
        RequestInterface $request,
    ): BaseResponseInterface {
        // Ensure the next closure is executed and captures the response.
        // This should be called properly to invoke the next step in the middleware stack.
        $response = $next($request);

        // Reset the dispatch status to allow further processing if needed
        $request->setDispatched(false);

        // Return the response from the closure or controller.
        return $response;
    }

    /**
     * Optional post-dispatch logic that can be implemented by subclasses.
     * This method is called after the controller action has been executed and a response has been generated.
     *
     * @param ResponseInterface $response The response that was generated by the controller.
     */
    protected function after($response): void
    {
        // This method is intentionally left empty to be optionally overridden in subclasses.
        // Subclasses can implement any custom logic after the response is generated.
    }
}
